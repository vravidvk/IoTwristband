#include <Arduino.h>
#include <SoftwareSerial.h>
#include <TinyGPS++.h>
#include <ESP8266WiFi.h>
#include <SPI.h>
#include <MFRC522.h>
#include "HTTPSRedirect.h"
#define SS_PIN D4  //slave select pin
#define RST_PIN D3  //reset pin
MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance
//GPS Module RX pin to NodeMCU D1
//GPS Module TX pin to NodeMCU D2
const int RXPin = 4, TXPin = 5;
SoftwareSerial neo6m(RXPin, TXPin);
TinyGPSPlus gps;
#define user_def_Lat    22.251572    // Update this value according to your requirement
#define user_def_Lang   84.875603    // Update this value according to your requirement
#define user_def_rad 0.003       // Area covered around the user defined locaition, increase value to cover more area
// Enter network credentials:
const char* ssid     = "My_network";
const char* password = "*********";
// After publishing spreadshseet as URL enter Google Script Deployment ID:
const char *GScriptId = "AKfycbymZDUJaAmDEMjD0RnWkCpd_TuiOHtMXkM49_rpGubUURkkuxyyuqhfUHrXOYO5bBgl";
// Enter command (insert_row or append_row) and your Google Sheets sheet name (default is Sheet1):
String payload_base =  "{\"command\": \"insert_row\", \"sheet_name\": \"Sheet1\", \"values\": ";
String payload = "";
// Setting up Google spreadsheets
const char* host = "script.google.com";
const int httpsPort = 443;
const char* fingerprint = "";
String url = String("/macros/s/") + GScriptId + "/exec";
HTTPSRedirect* client = nullptr;
//The following variables will be publised to the Google cloud
String Name = " ";
String Location = " ";
String Status = " ";
String Action = " ";
String Access = " ";
String Latitude = " ";
String Longitude = " ";
String incomingByte = ""; // for incoming serial data from fingerprint sensor
String GMAP_API_KEY = "AIzaSyBMuwqvf1MR_BbfDE1PRhcjCjCPt6_Chr4";
WiFiServer server(80);
String html;
void setup() {
  Serial.begin(115200);        
  delay(10);
  Serial.println('\n');
  SPI.begin();      // Initiate  SPI bus
  mfrc522.PCD_Init();   // Initiate MFRC522
   neo6m.begin(9600);
    // Connect to WiFi
  WiFi.begin(ssid, password);             
  Serial.print("Connecting to ");
  Serial.print(ssid); Serial.println(" ...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println('\n');
  Serial.println("Connection has been established!");  
  Serial.print("IP address:\t");
  Serial.println(WiFi.localIP());

  // Use HTTPSRedirect class to create a new TLS connection
  client = new HTTPSRedirect(httpsPort);
  client->setInsecure();
  client->setPrintResponseBody(true);
  client->setContentTypeHeader("application/json");
    Serial.print("Connecting to ");
  Serial.println(host);
  // Try to connect for a maximum of 5 times
  bool flag = false;
  for (int i=0; i<5; i++){ 
    int retval = client->connect(host, httpsPort);
    if (retval == 1){
       flag = true;
       Serial.println("Connected successfully");
       break;
    }
    else
      Serial.println("Connection has failed. Retrying now...");
  }
  if (!flag){
    Serial.print("Could not connect to server: ");
    Serial.println(host);
    return;
  }
  delete client;    
  client = nullptr; 
  Serial.println("Please scan your wristband/tag");
  Serial.println();
}
void publish() {
  //Show UID on serial monitor
  Serial.print("UID tag :");
  String content= "";
  byte letter;
  if (Serial.available() > 0) {
    // read the incoming byte:
    incomingByte = Serial.read(); //fingerprint
    for (byte i = 0; i < mfrc522.uid.size; i++) 
    {
       Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
       Serial.print(mfrc522.uid.uidByte[i], HEX);
       content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
       content.concat(String(mfrc522.uid.uidByte[i], HEX));
    }
    Serial.println();
    Serial.print("Message : ");
    content.toUpperCase();
    if (content.substring(1) == "76 A7 64 57" && incomingByte == "1") //change here the UID of the card/cards that you want to give access
    {
      Name="Sharanya 18BEC1189"; Location="VIT Chennai"; Status="Healthy"; Action="Enter";
      Serial.println("Authorized access");
      Serial.println();
      delay(3000);
    }
   else if (content.substring(1) == "97 6F E5 E0" && incomingByte == "2") //change here the UID of the card/cards that you want to give access
    {
      Name="Vishali 18BEC1177"; Location="VIT Chennai"; Status="Recovered"; Action="Enter";
      Serial.println("Authorized access");
      Serial.println();
      delay(3000);
    }
    else if (content.substring(1) == "E0 63 87 D4" && incomingByte == "3") //change here the UID of the card/cards that you want to give access
    {
      Name="Srinidhi 18BEC1196"; Location="VIT Chennai"; Status="Healthy"; Action="Enter";
      Serial.println("Authorized access");
      Serial.println();
      delay(3000);
    }
    else if (content.substring(1) == "40 C7 89 D4" && incomingByte == "4") //change here the UID of the card/cards that you want to give access
    {
      Name="Rahul 18BCE1156"; Location="VIT Chennai"; Status="Quarantine"; Action="Cannot enter";
      Serial.println("Denied access");
      Serial.println();
      delay(3000);
    }
    else if (content.substring(1) == "B0 5A 7E D4" && incomingByte == "5") //change here the UID of the card/cards that you want to give access
    {
      Name="Priya 18BLC1234"; Location="VIT Chennai"; Status="Quarantine"; Action="Cannot enter";
      Serial.println("Denied access");
      Serial.println();
      delay(3000);
    }
     else if (content.substring(1) == "A0 D0 5D D4" && incomingByte == "6") //change here the UID of the card/cards that you want to give access
    {
      Name="Karan 18BEC1267"; Location="VIT Chennai"; Status="Recovered"; Action="Enter";
      Serial.println("Authorized access");
      Serial.println();
      delay(3000);
    }
    else if (content.substring(1) == "A0 A1 7B D4" && incomingByte == "7") //change here the UID of the card/cards that you want to give access
    {
      Name="Alia 18BCE1136"; Location="VIT Chennai"; Status="Recovered"; Action="Enter";
      Serial.println("Authorized access");
      Serial.println();
      delay(3000);
    }
    else if (content.substring(1) == "40 EF A3 D4" && incomingByte == "8") //change here the UID of the card/cards that you want to give access
    {
      Name="Rohan 18BLC1022"; Location="VIT Chennai"; Status="Quarantine"; Action="Cannot enter";
      Serial.println("Denied access");
      Serial.println();
      delay(3000);
    }
    else if (content.substring(1) == "F0 0B 9E D4" && incomingByte == "9") //change here the UID of the card/cards that you want to give access
    {
      Name="Akash 1BBME1002"; Location="VIT Chennai"; Status="Quarantine"; Action="Cannot enter";
      Serial.println("Denied access");
      Serial.println();
      delay(3000);
    }
    else if (content.substring(1) == "B7 48 E3 E0" && incomingByte == "10") //change here the UID of the card/cards that you want to give access
    {
      Name="Sneha 18BCE1012"; Location="VIT Chennai"; Status="Healthy"; Action="Enter";
      Serial.println("Authorized access");
      Serial.println();
      delay(3000);
    }
    else if (content.substring(1) == "30 2A 77 AE" && incomingByte == "11") //change here the UID of the card/cards that you want to give access
    {
      Name="Raj 18BEE1302"; Location="VIT Chennai"; Status="Healthy"; Action="Enter";
      Serial.println("Authorized access");
      Serial.println();
      delay(3000);
    }
   else   {
      Serial.println("Unrecognised ID");
      delay(3000);
    }
  }

  gps_module(1000);
  if (gps.location.isValid()) //checking avialability of GPS
  {
    //Storing the Latitude and Longitude
    double lat, lng, difflat, difflong;
    Latitude = String(gps.location.lat(), 6);
    Longitude = String(gps.location.lng(), 6);
    // Extracting the live GPS co-ordinates
    lat = gps.location.lat();
    lng = gps.location.lng();
    Serial.print(F("Location: ")); 
    Serial.print(lat, 5);                                       // Print Latitude.      
    Serial.print(F(","));
    Serial.println(lng, 5);                                       // Print Longitude. 
    difflat = user_def_Lat - lat;
    difflong = user_def_Lang - lng;
    if( ((difflat <= user_def_rad) && (difflat >= (user_def_rad * -1))) && ((difflong <= user_def_rad) && (difflong >= (user_def_rad * -1))) )
    {
      Serial.println("Perimeter accessed");  // User has entered in the predefined area.
      Access="Perimeter accessed";
    }
    else
    {
      Serial.println("No breach"); // User is outside the predefined area.
      Access="No breach";
    }
  }

  static bool flag = false;
  if (!flag){
    client = new HTTPSRedirect(httpsPort);
    client->setInsecure();
    flag = true;
    client->setPrintResponseBody(true);
    client->setContentTypeHeader("application/json");
  }
  if (client != nullptr){
    if (!client->connected()){
      client->connect(host, httpsPort);
    }
  }
  else{
    Serial.println("Error creating client object!");
  }
  
  // Create json object string to send to Google Sheets
  payload = payload_base + "\"" + Name + "," + Location + "," + Status + "," + Action + "," + Latitude + "," + Longitude + "," + Access + "\"}";
  
  // Publish data to Google Sheets
  Serial.println("Publishing data...");
  Serial.println(payload);
  if(client->POST(url, host, payload)){ 
    // do stuff here if publish was successful
  }
  else{
    // do stuff here if publish was not successful
    Serial.println("Error while connecting");
  }
}

void loop() {
  // Looking for new tags
  if ( ! mfrc522.PICC_IsNewCardPresent()) 
  {
    return;
  }
  // Select the card to be read
  if ( ! mfrc522.PICC_ReadCardSerial()) 
  {
    return;
  }
  
  publish();
  delay(5000);
}

static void gps_module(unsigned long ms)
{
  unsigned long start = millis();
  do 
  {
    while (neo6m.available())
      gps.encode(neo6m.read());
  } while (millis() - start < ms);
}
